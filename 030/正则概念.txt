	正则中的概念
		原子(正则中的最小匹配单位)
			可见原子
				键盘输出后可以看得见的字符,如符号,英文,数字等
				注意点
					以下字符具有特殊含义,如果要使用原本的字符意思,需要在前面添加\来转义 . * + ? $ ^ |:! \ /() {} []
			不可见原子
				键盘输出后看不见的字符,如换行(\n),回车(\r),制表符(\t),垂直制表符(\v) 换页符(\f)
		原子筛选
			|   竖线两边任意匹配
			[]  括号中任意一个原子,可以写区间(闭区间),如[a-z0-9]
			[^] 括号中任意一个原子之外的原子
			注意点
				一般情况下,正则中的一个字符对应字符串中的一个字符, 例如:/ab\t/表示字符串中连续出现字符 ab制表符 
			案例
				过滤多个关键字:str.replace(/淘宝|京东/g,'*')
				匹配汉字并且获取长度:str.replace(/[\u4e00-\u9fa5]/g,'bb').length
				过滤HTML标签:str.replace(/<[^<>]+>/g,'*')
		原子集合
			. 除了回车和换行外的任意字符 等价[^\r\n]
			\d 任意数字,等价[0-9], \D 任意非数字 等价[^0-9]
			\w 任意数字,字母,下划线 等价[0-9a-zA-Z_],\W 任意非数字,字母,下划线 等价[^0-9a-zA-Z_]
			\s 空白符 等价于[\t\n\f\r],\S 非空白符 等价于[^\t\n\f\r]
		量词(限定前面原子出现的次数)
			{n} 前面原子恰好出现n次
			{n,} 前面原子最少出现n次
			{n,m} 前面原子最少出现n次,最多出现m次
			+ 前面原子最少出现1次 等价{1,}
			? 前面原子最少出现0次,最多出现一次 等价{0,1}
			* 前面原子最少出现0次 {0,}
			案例
				合法年份(公元1000年至公元2999年):/^[1-2]\d{3}$/.test(str)
				验证手机号:/^1[35789]\d{9}$/.test(str)
				密码(以字母开头,长度在6~12之间,只能包含字母、数字和下划线)：/^[a-zA-Z]\w{5,11}$/.test(str)
		匹配模式
			贪婪模式
				尽可能多的匹配(默认)
				如'12345'.replace(/\d{2,4}/,'*')的结果是"*5"
			非贪婪模式
				尽可能少的匹配(在量词后添加?)
				如'12345'.replace(/\d{2,4}?/,'*');的结果是"*345"
		边界控制
			^  匹配字符串开始的位置,限制必须以其后面的原子开头,前面不能有任何东西
			$  匹配字符串结尾的位置,限制必须以其前面的原子结束,后面不能有任何东西
			\b 单词边界
			\B 非单词边界
			() 把括号里面的正常表达匹配的结果当作一个原子来看,起到分组的效果,分组后可以通过反向引用来取得分组后的值,反向引用从$1开始
			案例
				邮箱校验:/^\w+@\w+\.[a-z]{2,5}$/.test(str)
				替换单词:str.replace(/\bis\b/gi,'*')
				url解析: str.match(/(\w+):\/\/(\w+)\.([0-9a-z-]+)\.(\w+)/)
				将年月日替换成月日年:'2018-05-09'.replace(/(\d{4})-(\d{2})-(\d{2})/,'$2/$3/$1')
		修正模式
			i(ignoreCase) 忽略大小写,默认区分大小写,可以通过正则对象上的ignoreCase属性查看
			g(global) 匹配所有的,默认只找到第一个,可以通过正则对象上的global属性查看
		前瞻
			什么是前瞻?
				正则从文本头部向文本尾部解析,文本尾部成为"前",前瞻就是向前(文本尾部)检查是否符合断言
			正向前瞻 exp(?=assert)
				匹配到exp的内容后再看前面的内容符合不符合assert,符合的话就匹配exp的内容
				举例:字母后面是数字的字母,'a1b2c*d&'.replace(/[a-z](?=\d)/g,'$'),结果为:"$1$2c*d&"
			负向前瞻 exp(?!assert)
				匹配到exp的内容后再看前面的内容符合不符合assert,不符合的话就匹配exp的内容
				举例:字母后面不是数字的字母,'a1b2c*d&'.replace(/[a-z](?!\d)/g,'$'),结果为:"a1b2$*$&"